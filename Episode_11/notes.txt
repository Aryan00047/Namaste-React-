Higher ORder Component- takes component as input and returns (modified,enhanced/tweaked) component as output.

These are pure functions(it will not change anything of the component passed to it)
We only enhance the component passed to it.

important part of react application is to manage its data. UI is static , does not have logic of its own.
UI is different part and data is different part. All applications have two layers:
Data Layer - consists of state, props, local variables ....
UI Layer - powered by data layer.

If you how to manage the data part in application, your application will be super fast.

In this episdoe, we will learn about data layer.

//we will work on accordion.
Accordion is closing and opening of items on click.

in js, we don't use @types --- we can use types directly but to use @types we need to add it in ['@types'] in json structure 
while fetching api.

controlled and uncontrolled components:
if restaurant was controlling itself for showItems then it was uncontrolled component. but if we give that power to parent 
component then it is controlled component.

we cannot directly change the stae of parent component through child component but can change indirectly by passing 
setState function as prop to child component.

Lifting state up - advanced concept- sometimes we have to lift the state of child component to parent component to manage the state

Props Drilling - 
Passing props through mmutiple levels of components just to reach the component which needs that prop, because react 
is a single flow language. 
Parent -> Child -> GrandChild -> GreatGrandChild -> .... -> TargetComponent

This is not a good practice and to solve this we use context.

React gives ability to create context.

useContext is imported from react library. We can create multiplte contexts.
 We can get context data anywhere in the app.

 Only data which can be used or is being used in multiple components should be put in context.

 In class based components, to use context we use component as <UserContext.Consumer> {(data) => <h1>(data)</h1>}</UserContext.Consumer>

 To pass a same value across all the application we use provider in context.
We can use multiple contexts like:

Default value is :Default User

<App/> --- will have default value
<userContext.Provider value={"Namaste React"}>
<Header/> --- will have value as Namaste React
<userContext.Provider value={"Demo User"}>
<Store/> --- will have value as Demo User
</userContext.Provider> 
</userContext.Provider>


we can also set the values using context across the whole application.... This is a super power that context have.
Even if we change value in an individual component, context shares that value with every wrapped component(even within lazy loaded
components).

Data Management Library : Like redux. In small to mid applications we can use context without needing any data management library.

What is Redux: State management library, it is not inside redux .

Can we use context in large applications?
Yes, we can use , but redux is scalable and using context we have to create different different context for different type of data.
But redux is mostly preffered.

Redux offers: Redux thunk - middleware....

We can use context till mid applications but when our application becomes large, redux comes into picture.